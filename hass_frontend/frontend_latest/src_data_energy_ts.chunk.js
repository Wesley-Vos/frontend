"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkhome_assistant_frontend"] = self["webpackChunkhome_assistant_frontend"] || []).push([["src_data_energy_ts"],{

/***/ "./src/common/string/compare.ts":
/*!**************************************!*\
  !*** ./src/common/string/compare.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"stringCompare\": () => (/* binding */ stringCompare),\n/* harmony export */   \"caseInsensitiveStringCompare\": () => (/* binding */ caseInsensitiveStringCompare)\n/* harmony export */ });\nconst stringCompare = (a, b) => {\n  if (a < b) {\n    return -1;\n  }\n\n  if (a > b) {\n    return 1;\n  }\n\n  return 0;\n};\nconst caseInsensitiveStringCompare = (a, b) => stringCompare(a.toLowerCase(), b.toLowerCase());//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tbW9uL3N0cmluZy9jb21wYXJlLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2hvbWUtYXNzaXN0YW50LWZyb250ZW5kLy4vc3JjL2NvbW1vbi9zdHJpbmcvY29tcGFyZS50cz83MGU1Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBzdHJpbmdDb21wYXJlID0gKGE6IHN0cmluZywgYjogc3RyaW5nKSA9PiB7XG4gIGlmIChhIDwgYikge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBpZiAoYSA+IGIpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIHJldHVybiAwO1xufTtcblxuZXhwb3J0IGNvbnN0IGNhc2VJbnNlbnNpdGl2ZVN0cmluZ0NvbXBhcmUgPSAoYTogc3RyaW5nLCBiOiBzdHJpbmcpID0+XG4gIHN0cmluZ0NvbXBhcmUoYS50b0xvd2VyQ2FzZSgpLCBiLnRvTG93ZXJDYXNlKCkpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/common/string/compare.ts\n");

/***/ }),

/***/ "./src/common/util/group-by.ts":
/*!*************************************!*\
  !*** ./src/common/util/group-by.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"groupBy\": () => (/* binding */ groupBy)\n/* harmony export */ });\nconst groupBy = (list, keySelector) => {\n  const result = {};\n\n  for (const item of list) {\n    const key = keySelector(item);\n\n    if (key in result) {\n      result[key].push(item);\n    } else {\n      result[key] = [item];\n    }\n  }\n\n  return result;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tbW9uL3V0aWwvZ3JvdXAtYnkudHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBSUE7O0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2hvbWUtYXNzaXN0YW50LWZyb250ZW5kLy4vc3JjL2NvbW1vbi91dGlsL2dyb3VwLWJ5LnRzP2Y4ZTAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGdyb3VwQnkgPSA8VD4oXG4gIGxpc3Q6IFRbXSxcbiAga2V5U2VsZWN0b3I6IChpdGVtOiBUKSA9PiBzdHJpbmdcbik6IHsgW2tleTogc3RyaW5nXTogVFtdIH0gPT4ge1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgZm9yIChjb25zdCBpdGVtIG9mIGxpc3QpIHtcbiAgICBjb25zdCBrZXkgPSBrZXlTZWxlY3RvcihpdGVtKTtcbiAgICBpZiAoa2V5IGluIHJlc3VsdCkge1xuICAgICAgcmVzdWx0W2tleV0ucHVzaChpdGVtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSBbaXRlbV07XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/common/util/group-by.ts\n");

/***/ }),

/***/ "./src/common/util/subscribe-one.ts":
/*!******************************************!*\
  !*** ./src/common/util/subscribe-one.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"subscribeOne\": () => (/* binding */ subscribeOne)\n/* harmony export */ });\nconst subscribeOne = async (conn, subscribe) => new Promise(resolve => {\n  const unsub = subscribe(conn, items => {\n    unsub();\n    resolve(items);\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tbW9uL3V0aWwvc3Vic2NyaWJlLW9uZS50cy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBRUE7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaG9tZS1hc3Npc3RhbnQtZnJvbnRlbmQvLi9zcmMvY29tbW9uL3V0aWwvc3Vic2NyaWJlLW9uZS50cz83NzAxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbm5lY3Rpb24sIFVuc3Vic2NyaWJlRnVuYyB9IGZyb20gXCJob21lLWFzc2lzdGFudC1qcy13ZWJzb2NrZXRcIjtcblxuZXhwb3J0IGNvbnN0IHN1YnNjcmliZU9uZSA9IGFzeW5jIDxUPihcbiAgY29ubjogQ29ubmVjdGlvbixcbiAgc3Vic2NyaWJlOiAoXG4gICAgY29ubjI6IENvbm5lY3Rpb24sXG4gICAgb25DaGFuZ2U6IChpdGVtczogVCkgPT4gdm9pZFxuICApID0+IFVuc3Vic2NyaWJlRnVuY1xuKSA9PlxuICBuZXcgUHJvbWlzZTxUPigocmVzb2x2ZSkgPT4ge1xuICAgIGNvbnN0IHVuc3ViID0gc3Vic2NyaWJlKGNvbm4sIChpdGVtcykgPT4ge1xuICAgICAgdW5zdWIoKTtcbiAgICAgIHJlc29sdmUoaXRlbXMpO1xuICAgIH0pO1xuICB9KTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/common/util/subscribe-one.ts\n");

/***/ }),

/***/ "./src/data/config_entries.ts":
/*!************************************!*\
  !*** ./src/data/config_entries.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ERROR_STATES\": () => (/* binding */ ERROR_STATES),\n/* harmony export */   \"getConfigEntries\": () => (/* binding */ getConfigEntries),\n/* harmony export */   \"updateConfigEntry\": () => (/* binding */ updateConfigEntry),\n/* harmony export */   \"deleteConfigEntry\": () => (/* binding */ deleteConfigEntry),\n/* harmony export */   \"reloadConfigEntry\": () => (/* binding */ reloadConfigEntry),\n/* harmony export */   \"disableConfigEntry\": () => (/* binding */ disableConfigEntry),\n/* harmony export */   \"enableConfigEntry\": () => (/* binding */ enableConfigEntry)\n/* harmony export */ });\nconst ERROR_STATES = [\"migration_error\", \"setup_error\", \"setup_retry\"];\nconst getConfigEntries = (hass, filters) => {\n  const params = new URLSearchParams();\n\n  if (filters) {\n    if (filters.type) {\n      params.append(\"type\", filters.type);\n    }\n\n    if (filters.domain) {\n      params.append(\"domain\", filters.domain);\n    }\n  }\n\n  return hass.callApi(\"GET\", `config/config_entries/entry?${params.toString()}`);\n};\nconst updateConfigEntry = (hass, configEntryId, updatedValues) => hass.callWS({\n  type: \"config_entries/update\",\n  entry_id: configEntryId,\n  ...updatedValues\n});\nconst deleteConfigEntry = (hass, configEntryId) => hass.callApi(\"DELETE\", `config/config_entries/entry/${configEntryId}`);\nconst reloadConfigEntry = (hass, configEntryId) => hass.callApi(\"POST\", `config/config_entries/entry/${configEntryId}/reload`);\nconst disableConfigEntry = (hass, configEntryId) => hass.callWS({\n  type: \"config_entries/disable\",\n  entry_id: configEntryId,\n  disabled_by: \"user\"\n});\nconst enableConfigEntry = (hass, configEntryId) => hass.callWS({\n  type: \"config_entries/disable\",\n  entry_id: configEntryId,\n  disabled_by: null\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZGF0YS9jb25maWdfZW50cmllcy50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBOEJBO0FBTUE7QUFJQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUlBO0FBRUE7QUFNQTtBQUNBO0FBQ0E7QUFIQTtBQU1BO0FBS0E7QUFTQTtBQUtBO0FBQ0E7QUFDQTtBQUhBO0FBTUE7QUFJQTtBQUNBO0FBQ0E7QUFIQSIsInNvdXJjZXMiOlsid2VicGFjazovL2hvbWUtYXNzaXN0YW50LWZyb250ZW5kLy4vc3JjL2RhdGEvY29uZmlnX2VudHJpZXMudHM/MmYzMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIb21lQXNzaXN0YW50IH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29uZmlnRW50cnkge1xuICBlbnRyeV9pZDogc3RyaW5nO1xuICBkb21haW46IHN0cmluZztcbiAgdGl0bGU6IHN0cmluZztcbiAgc291cmNlOiBzdHJpbmc7XG4gIHN0YXRlOlxuICAgIHwgXCJsb2FkZWRcIlxuICAgIHwgXCJzZXR1cF9lcnJvclwiXG4gICAgfCBcIm1pZ3JhdGlvbl9lcnJvclwiXG4gICAgfCBcInNldHVwX3JldHJ5XCJcbiAgICB8IFwibm90X2xvYWRlZFwiXG4gICAgfCBcImZhaWxlZF91bmxvYWRcIjtcbiAgc3VwcG9ydHNfb3B0aW9uczogYm9vbGVhbjtcbiAgc3VwcG9ydHNfcmVtb3ZlX2RldmljZTogYm9vbGVhbjtcbiAgc3VwcG9ydHNfdW5sb2FkOiBib29sZWFuO1xuICBwcmVmX2Rpc2FibGVfbmV3X2VudGl0aWVzOiBib29sZWFuO1xuICBwcmVmX2Rpc2FibGVfcG9sbGluZzogYm9vbGVhbjtcbiAgZGlzYWJsZWRfYnk6IFwidXNlclwiIHwgbnVsbDtcbiAgcmVhc29uOiBzdHJpbmcgfCBudWxsO1xufVxuXG5leHBvcnQgdHlwZSBDb25maWdFbnRyeU11dGFibGVQYXJhbXMgPSBQYXJ0aWFsPFxuICBQaWNrPFxuICAgIENvbmZpZ0VudHJ5LFxuICAgIFwidGl0bGVcIiB8IFwicHJlZl9kaXNhYmxlX25ld19lbnRpdGllc1wiIHwgXCJwcmVmX2Rpc2FibGVfcG9sbGluZ1wiXG4gID5cbj47XG5cbmV4cG9ydCBjb25zdCBFUlJPUl9TVEFURVM6IENvbmZpZ0VudHJ5W1wic3RhdGVcIl1bXSA9IFtcbiAgXCJtaWdyYXRpb25fZXJyb3JcIixcbiAgXCJzZXR1cF9lcnJvclwiLFxuICBcInNldHVwX3JldHJ5XCIsXG5dO1xuXG5leHBvcnQgY29uc3QgZ2V0Q29uZmlnRW50cmllcyA9IChcbiAgaGFzczogSG9tZUFzc2lzdGFudCxcbiAgZmlsdGVycz86IHsgdHlwZT86IFwiaGVscGVyXCIgfCBcImludGVncmF0aW9uXCI7IGRvbWFpbj86IHN0cmluZyB9XG4pOiBQcm9taXNlPENvbmZpZ0VudHJ5W10+ID0+IHtcbiAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICBpZiAoZmlsdGVycykge1xuICAgIGlmIChmaWx0ZXJzLnR5cGUpIHtcbiAgICAgIHBhcmFtcy5hcHBlbmQoXCJ0eXBlXCIsIGZpbHRlcnMudHlwZSk7XG4gICAgfVxuICAgIGlmIChmaWx0ZXJzLmRvbWFpbikge1xuICAgICAgcGFyYW1zLmFwcGVuZChcImRvbWFpblwiLCBmaWx0ZXJzLmRvbWFpbik7XG4gICAgfVxuICB9XG4gIHJldHVybiBoYXNzLmNhbGxBcGk8Q29uZmlnRW50cnlbXT4oXG4gICAgXCJHRVRcIixcbiAgICBgY29uZmlnL2NvbmZpZ19lbnRyaWVzL2VudHJ5PyR7cGFyYW1zLnRvU3RyaW5nKCl9YFxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IHVwZGF0ZUNvbmZpZ0VudHJ5ID0gKFxuICBoYXNzOiBIb21lQXNzaXN0YW50LFxuICBjb25maWdFbnRyeUlkOiBzdHJpbmcsXG4gIHVwZGF0ZWRWYWx1ZXM6IENvbmZpZ0VudHJ5TXV0YWJsZVBhcmFtc1xuKSA9PlxuICBoYXNzLmNhbGxXUzx7IHJlcXVpcmVfcmVzdGFydDogYm9vbGVhbjsgY29uZmlnX2VudHJ5OiBDb25maWdFbnRyeSB9Pih7XG4gICAgdHlwZTogXCJjb25maWdfZW50cmllcy91cGRhdGVcIixcbiAgICBlbnRyeV9pZDogY29uZmlnRW50cnlJZCxcbiAgICAuLi51cGRhdGVkVmFsdWVzLFxuICB9KTtcblxuZXhwb3J0IGNvbnN0IGRlbGV0ZUNvbmZpZ0VudHJ5ID0gKGhhc3M6IEhvbWVBc3Npc3RhbnQsIGNvbmZpZ0VudHJ5SWQ6IHN0cmluZykgPT5cbiAgaGFzcy5jYWxsQXBpPHtcbiAgICByZXF1aXJlX3Jlc3RhcnQ6IGJvb2xlYW47XG4gIH0+KFwiREVMRVRFXCIsIGBjb25maWcvY29uZmlnX2VudHJpZXMvZW50cnkvJHtjb25maWdFbnRyeUlkfWApO1xuXG5leHBvcnQgY29uc3QgcmVsb2FkQ29uZmlnRW50cnkgPSAoaGFzczogSG9tZUFzc2lzdGFudCwgY29uZmlnRW50cnlJZDogc3RyaW5nKSA9PlxuICBoYXNzLmNhbGxBcGk8e1xuICAgIHJlcXVpcmVfcmVzdGFydDogYm9vbGVhbjtcbiAgfT4oXCJQT1NUXCIsIGBjb25maWcvY29uZmlnX2VudHJpZXMvZW50cnkvJHtjb25maWdFbnRyeUlkfS9yZWxvYWRgKTtcblxuZXhwb3J0IGludGVyZmFjZSBEaXNhYmxlQ29uZmlnRW50cnlSZXN1bHQge1xuICByZXF1aXJlX3Jlc3RhcnQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjb25zdCBkaXNhYmxlQ29uZmlnRW50cnkgPSAoXG4gIGhhc3M6IEhvbWVBc3Npc3RhbnQsXG4gIGNvbmZpZ0VudHJ5SWQ6IHN0cmluZ1xuKSA9PlxuICBoYXNzLmNhbGxXUzxEaXNhYmxlQ29uZmlnRW50cnlSZXN1bHQ+KHtcbiAgICB0eXBlOiBcImNvbmZpZ19lbnRyaWVzL2Rpc2FibGVcIixcbiAgICBlbnRyeV9pZDogY29uZmlnRW50cnlJZCxcbiAgICBkaXNhYmxlZF9ieTogXCJ1c2VyXCIsXG4gIH0pO1xuXG5leHBvcnQgY29uc3QgZW5hYmxlQ29uZmlnRW50cnkgPSAoaGFzczogSG9tZUFzc2lzdGFudCwgY29uZmlnRW50cnlJZDogc3RyaW5nKSA9PlxuICBoYXNzLmNhbGxXUzx7XG4gICAgcmVxdWlyZV9yZXN0YXJ0OiBib29sZWFuO1xuICB9Pih7XG4gICAgdHlwZTogXCJjb25maWdfZW50cmllcy9kaXNhYmxlXCIsXG4gICAgZW50cnlfaWQ6IGNvbmZpZ0VudHJ5SWQsXG4gICAgZGlzYWJsZWRfYnk6IG51bGwsXG4gIH0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/data/config_entries.ts\n");

/***/ }),

/***/ "./src/data/energy.ts":
/*!****************************!*\
  !*** ./src/data/energy.ts ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__) => {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"emptyFlowFromGridSourceEnergyPreference\": () => (/* binding */ emptyFlowFromGridSourceEnergyPreference),\n/* harmony export */   \"emptyFlowToGridSourceEnergyPreference\": () => (/* binding */ emptyFlowToGridSourceEnergyPreference),\n/* harmony export */   \"emptyGridSourceEnergyPreference\": () => (/* binding */ emptyGridSourceEnergyPreference),\n/* harmony export */   \"emptySolarEnergyPreference\": () => (/* binding */ emptySolarEnergyPreference),\n/* harmony export */   \"emptyBatteryEnergyPreference\": () => (/* binding */ emptyBatteryEnergyPreference),\n/* harmony export */   \"emptyGasEnergyPreference\": () => (/* binding */ emptyGasEnergyPreference),\n/* harmony export */   \"getEnergyInfo\": () => (/* binding */ getEnergyInfo),\n/* harmony export */   \"getEnergyPreferenceValidation\": () => (/* binding */ getEnergyPreferenceValidation),\n/* harmony export */   \"getEnergyPreferences\": () => (/* binding */ getEnergyPreferences),\n/* harmony export */   \"saveEnergyPreferences\": () => (/* binding */ saveEnergyPreferences),\n/* harmony export */   \"getFossilEnergyConsumption\": () => (/* binding */ getFossilEnergyConsumption),\n/* harmony export */   \"energySourcesByType\": () => (/* binding */ energySourcesByType),\n/* harmony export */   \"getEnergyDataCollection\": () => (/* binding */ getEnergyDataCollection),\n/* harmony export */   \"getEnergySolarForecasts\": () => (/* binding */ getEnergySolarForecasts),\n/* harmony export */   \"ENERGY_GAS_VOLUME_UNITS\": () => (/* binding */ ENERGY_GAS_VOLUME_UNITS),\n/* harmony export */   \"ENERGY_GAS_ENERGY_UNITS\": () => (/* binding */ ENERGY_GAS_ENERGY_UNITS),\n/* harmony export */   \"ENERGY_GAS_UNITS\": () => (/* binding */ ENERGY_GAS_UNITS),\n/* harmony export */   \"getEnergyGasUnitCategory\": () => (/* binding */ getEnergyGasUnitCategory),\n/* harmony export */   \"getEnergyGasUnit\": () => (/* binding */ getEnergyGasUnit)\n/* harmony export */ });\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/esm/differenceInDays/index.js\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/esm/addHours/index.js\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/esm/startOfToday/index.js\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/esm/startOfYesterday/index.js\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/esm/endOfToday/index.js\");\n/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! date-fns */ \"./node_modules/date-fns/esm/endOfYesterday/index.js\");\n/* harmony import */ var home_assistant_js_websocket__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! home-assistant-js-websocket */ \"./node_modules/home-assistant-js-websocket/dist/collection.js\");\n/* harmony import */ var _common_util_group_by__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/util/group-by */ \"./src/common/util/group-by.ts\");\n/* harmony import */ var _common_util_subscribe_one__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/util/subscribe-one */ \"./src/common/util/subscribe-one.ts\");\n/* harmony import */ var _config_entries__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config_entries */ \"./src/data/config_entries.ts\");\n/* harmony import */ var _entity_registry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./entity_registry */ \"./src/data/entity_registry.ts\");\n/* harmony import */ var _history__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./history */ \"./src/data/history.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_history__WEBPACK_IMPORTED_MODULE_4__]);\n_history__WEBPACK_IMPORTED_MODULE_4__ = (__webpack_async_dependencies__.then ? await __webpack_async_dependencies__ : __webpack_async_dependencies__)[0];\n\n\n\n\n\n\n\nconst energyCollectionKeys = [];\nconst emptyFlowFromGridSourceEnergyPreference = () => ({\n  stat_energy_from: \"\",\n  stat_cost: null,\n  entity_energy_from: null,\n  entity_energy_price: null,\n  number_energy_price: null\n});\nconst emptyFlowToGridSourceEnergyPreference = () => ({\n  stat_energy_to: \"\",\n  stat_compensation: null,\n  entity_energy_to: null,\n  entity_energy_price: null,\n  number_energy_price: null\n});\nconst emptyGridSourceEnergyPreference = () => ({\n  type: \"grid\",\n  flow_from: [],\n  flow_to: [],\n  cost_adjustment_day: 0\n});\nconst emptySolarEnergyPreference = () => ({\n  type: \"solar\",\n  stat_energy_from: \"\",\n  config_entry_solar_forecast: null\n});\nconst emptyBatteryEnergyPreference = () => ({\n  type: \"battery\",\n  stat_energy_from: \"\",\n  stat_energy_to: \"\"\n});\nconst emptyGasEnergyPreference = () => ({\n  type: \"gas\",\n  stat_energy_from: \"\",\n  stat_cost: null,\n  entity_energy_from: null,\n  entity_energy_price: null,\n  number_energy_price: null\n});\nconst getEnergyInfo = hass => hass.callWS({\n  type: \"energy/info\"\n});\nconst getEnergyPreferenceValidation = hass => hass.callWS({\n  type: \"energy/validate\"\n});\nconst getEnergyPreferences = hass => hass.callWS({\n  type: \"energy/get_prefs\"\n});\nconst saveEnergyPreferences = async (hass, prefs) => {\n  const newPrefs = hass.callWS({\n    type: \"energy/save_prefs\",\n    ...prefs\n  });\n  clearEnergyCollectionPreferences(hass);\n  return newPrefs;\n};\nconst getFossilEnergyConsumption = async (hass, startTime, energy_statistic_ids, co2_statistic_id, endTime, period = \"hour\") => hass.callWS({\n  type: \"energy/fossil_energy_consumption\",\n  start_time: startTime.toISOString(),\n  end_time: endTime === null || endTime === void 0 ? void 0 : endTime.toISOString(),\n  energy_statistic_ids,\n  co2_statistic_id,\n  period\n});\nconst energySourcesByType = prefs => (0,_common_util_group_by__WEBPACK_IMPORTED_MODULE_0__.groupBy)(prefs.energy_sources, item => item.type);\n\nconst getEnergyData = async (hass, prefs, start, end) => {\n  const [configEntries, entityRegistryEntries, info] = await Promise.all([(0,_config_entries__WEBPACK_IMPORTED_MODULE_2__.getConfigEntries)(hass, {\n    domain: \"co2signal\"\n  }), (0,_common_util_subscribe_one__WEBPACK_IMPORTED_MODULE_1__.subscribeOne)(hass.connection, _entity_registry__WEBPACK_IMPORTED_MODULE_3__.subscribeEntityRegistry), getEnergyInfo(hass)]);\n  const co2SignalConfigEntry = configEntries.length ? configEntries[0] : undefined;\n  let co2SignalEntity;\n\n  if (co2SignalConfigEntry) {\n    for (const entry of entityRegistryEntries) {\n      if (entry.config_entry_id !== co2SignalConfigEntry.entry_id) {\n        continue;\n      } // The integration offers 2 entities. We want the % one.\n\n\n      const co2State = hass.states[entry.entity_id];\n\n      if (!co2State || co2State.attributes.unit_of_measurement !== \"%\") {\n        continue;\n      }\n\n      co2SignalEntity = co2State.entity_id;\n      break;\n    }\n  }\n\n  const consumptionStatIDs = [];\n  const statIDs = [];\n  const gasSources = prefs.energy_sources.filter(source => source.type === \"gas\");\n  const gasStatisticIdsWithMeta = await (0,_history__WEBPACK_IMPORTED_MODULE_4__.getStatisticMetadata)(hass, gasSources.map(source => source.stat_energy_from));\n\n  for (const source of prefs.energy_sources) {\n    if (source.type === \"solar\") {\n      statIDs.push(source.stat_energy_from);\n      continue;\n    }\n\n    if (source.type === \"gas\") {\n      statIDs.push(source.stat_energy_from);\n      const entity = hass.states[source.stat_energy_from];\n\n      if (!entity) {\n        for (const statisticIdWithMeta of gasStatisticIdsWithMeta) {\n          if ((statisticIdWithMeta === null || statisticIdWithMeta === void 0 ? void 0 : statisticIdWithMeta.statistic_id) === source.stat_energy_from && statisticIdWithMeta !== null && statisticIdWithMeta !== void 0 && statisticIdWithMeta.unit_of_measurement) {\n            source.unit_of_measurement = (statisticIdWithMeta === null || statisticIdWithMeta === void 0 ? void 0 : statisticIdWithMeta.unit_of_measurement) === \"Wh\" ? \"kWh\" : statisticIdWithMeta === null || statisticIdWithMeta === void 0 ? void 0 : statisticIdWithMeta.unit_of_measurement;\n          }\n        }\n      }\n\n      if (source.stat_cost) {\n        statIDs.push(source.stat_cost);\n      }\n\n      const costStatId = info.cost_sensors[source.stat_energy_from];\n\n      if (costStatId) {\n        statIDs.push(costStatId);\n      }\n\n      continue;\n    }\n\n    if (source.type === \"battery\") {\n      statIDs.push(source.stat_energy_from);\n      statIDs.push(source.stat_energy_to);\n      continue;\n    } // grid source\n\n\n    for (const flowFrom of source.flow_from) {\n      consumptionStatIDs.push(flowFrom.stat_energy_from);\n      statIDs.push(flowFrom.stat_energy_from);\n\n      if (flowFrom.stat_cost) {\n        statIDs.push(flowFrom.stat_cost);\n      }\n\n      const costStatId = info.cost_sensors[flowFrom.stat_energy_from];\n\n      if (costStatId) {\n        statIDs.push(costStatId);\n      }\n    }\n\n    for (const flowTo of source.flow_to) {\n      statIDs.push(flowTo.stat_energy_to);\n\n      if (flowTo.stat_compensation) {\n        statIDs.push(flowTo.stat_compensation);\n      }\n\n      const costStatId = info.cost_sensors[flowTo.stat_energy_to];\n\n      if (costStatId) {\n        statIDs.push(costStatId);\n      }\n    }\n  }\n\n  const dayDifference = (0,date_fns__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(end || new Date(), start); // Subtract 1 hour from start to get starting point data\n\n  const startMinHour = (0,date_fns__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(start, -1);\n  const stats = await (0,_history__WEBPACK_IMPORTED_MODULE_4__.fetchStatistics)(hass, startMinHour, end, statIDs, dayDifference > 35 ? \"month\" : dayDifference > 2 ? \"day\" : \"hour\");\n  let fossilEnergyConsumption;\n\n  if (co2SignalEntity !== undefined) {\n    fossilEnergyConsumption = await getFossilEnergyConsumption(hass, start, consumptionStatIDs, co2SignalEntity, end, dayDifference > 35 ? \"month\" : dayDifference > 2 ? \"day\" : \"hour\");\n  }\n\n  Object.values(stats).forEach(stat => {\n    // if the start of the first value is after the requested period, we have the first data point, and should add a zero point\n    if (stat.length && new Date(stat[0].start) > startMinHour) {\n      stat.unshift({ ...stat[0],\n        start: startMinHour.toISOString(),\n        end: startMinHour.toISOString(),\n        sum: 0,\n        state: 0\n      });\n    }\n  });\n  const data = {\n    start,\n    end,\n    info,\n    prefs,\n    stats,\n    co2SignalConfigEntry,\n    co2SignalEntity,\n    fossilEnergyConsumption\n  };\n  return data;\n};\n\nconst clearEnergyCollectionPreferences = hass => {\n  energyCollectionKeys.forEach(key => {\n    const energyCollection = getEnergyDataCollection(hass, {\n      key\n    });\n    energyCollection.clearPrefs();\n\n    if (energyCollection._active) {\n      energyCollection.refresh();\n    }\n  });\n};\n\nconst getEnergyDataCollection = (hass, options = {}) => {\n  let key = \"_energy\";\n\n  if (options.key) {\n    if (!options.key.startsWith(\"energy_\")) {\n      throw new Error(\"Key need to start with energy_\");\n    }\n\n    key = `_${options.key}`;\n  }\n\n  if (hass.connection[key]) {\n    return hass.connection[key];\n  }\n\n  energyCollectionKeys.push(options.key);\n  const collection = (0,home_assistant_js_websocket__WEBPACK_IMPORTED_MODULE_7__.getCollection)(hass.connection, key, async () => {\n    if (!collection.prefs) {\n      // This will raise if not found.\n      // Detect by checking `e.code === \"not_found\"\n      collection.prefs = await getEnergyPreferences(hass);\n    }\n\n    if (collection._refreshTimeout) {\n      clearTimeout(collection._refreshTimeout);\n    }\n\n    if (collection._active && (!collection.end || collection.end > new Date())) {\n      // The stats are created every hour\n      // Schedule a refresh for 20 minutes past the hour\n      // If the end is larger than the current time.\n      const nextFetch = new Date();\n\n      if (nextFetch.getMinutes() >= 20) {\n        nextFetch.setHours(nextFetch.getHours() + 1);\n      }\n\n      nextFetch.setMinutes(20, 0, 0);\n      collection._refreshTimeout = window.setTimeout(() => collection.refresh(), nextFetch.getTime() - Date.now());\n    }\n\n    return getEnergyData(hass, collection.prefs, collection.start, collection.end);\n  });\n  const origSubscribe = collection.subscribe;\n\n  collection.subscribe = subscriber => {\n    const unsub = origSubscribe(subscriber);\n    collection._active++;\n    return () => {\n      collection._active--;\n\n      if (collection._active < 1) {\n        clearTimeout(collection._refreshTimeout);\n        collection._refreshTimeout = undefined;\n      }\n\n      unsub();\n    };\n  };\n\n  collection._active = 0;\n  collection.prefs = options.prefs;\n  const now = new Date(); // Set start to start of today if we have data for today, otherwise yesterday\n\n  collection.start = now.getHours() > 0 ? (0,date_fns__WEBPACK_IMPORTED_MODULE_8__[\"default\"])() : (0,date_fns__WEBPACK_IMPORTED_MODULE_9__[\"default\"])();\n  collection.end = now.getHours() > 0 ? (0,date_fns__WEBPACK_IMPORTED_MODULE_10__[\"default\"])() : (0,date_fns__WEBPACK_IMPORTED_MODULE_11__[\"default\"])();\n\n  const scheduleUpdatePeriod = () => {\n    collection._updatePeriodTimeout = window.setTimeout(() => {\n      collection.start = (0,date_fns__WEBPACK_IMPORTED_MODULE_8__[\"default\"])();\n      collection.end = (0,date_fns__WEBPACK_IMPORTED_MODULE_10__[\"default\"])();\n      scheduleUpdatePeriod();\n    }, (0,date_fns__WEBPACK_IMPORTED_MODULE_6__[\"default\"])((0,date_fns__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(), 1).getTime() - Date.now() // Switch to next day an hour after the day changed\n    );\n  };\n\n  scheduleUpdatePeriod();\n\n  collection.clearPrefs = () => {\n    collection.prefs = undefined;\n  };\n\n  collection.setPeriod = (newStart, newEnd) => {\n    var _collection$end;\n\n    collection.start = newStart;\n    collection.end = newEnd;\n\n    if (collection.start.getTime() === (0,date_fns__WEBPACK_IMPORTED_MODULE_8__[\"default\"])().getTime() && ((_collection$end = collection.end) === null || _collection$end === void 0 ? void 0 : _collection$end.getTime()) === (0,date_fns__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().getTime() && !collection._updatePeriodTimeout) {\n      scheduleUpdatePeriod();\n    } else if (collection._updatePeriodTimeout) {\n      clearTimeout(collection._updatePeriodTimeout);\n      collection._updatePeriodTimeout = undefined;\n    }\n  };\n\n  return collection;\n};\nconst getEnergySolarForecasts = hass => hass.callWS({\n  type: \"energy/solar_forecast\"\n});\nconst ENERGY_GAS_VOLUME_UNITS = [\"m³\", \"ft³\"];\nconst ENERGY_GAS_ENERGY_UNITS = [\"kWh\"];\nconst ENERGY_GAS_UNITS = [...ENERGY_GAS_VOLUME_UNITS, ...ENERGY_GAS_ENERGY_UNITS];\nconst getEnergyGasUnitCategory = (hass, prefs) => {\n  for (const source of prefs.energy_sources) {\n    if (source.type !== \"gas\") {\n      continue;\n    }\n\n    const entity = hass.states[source.stat_energy_from];\n\n    if (entity) {\n      return ENERGY_GAS_VOLUME_UNITS.includes(entity.attributes.unit_of_measurement) ? \"volume\" : \"energy\";\n    }\n  }\n\n  return undefined;\n};\nconst getEnergyGasUnit = (hass, prefs) => {\n  for (const source of prefs.energy_sources) {\n    if (source.type !== \"gas\") {\n      continue;\n    }\n\n    const entity = hass.states[source.stat_energy_from];\n\n    if (entity !== null && entity !== void 0 && entity.attributes.unit_of_measurement) {\n      // Wh is normalized to kWh by stats generation\n      return entity.attributes.unit_of_measurement === \"Wh\" ? \"kWh\" : entity.attributes.unit_of_measurement;\n    }\n\n    if (source.unit_of_measurement) {\n      return source.unit_of_measurement;\n    }\n  }\n\n  return undefined;\n};\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/data/energy.ts\n");

/***/ }),

/***/ "./src/data/entity_registry.ts":
/*!*************************************!*\
  !*** ./src/data/entity_registry.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"findBatteryEntity\": () => (/* binding */ findBatteryEntity),\n/* harmony export */   \"findBatteryChargingEntity\": () => (/* binding */ findBatteryChargingEntity),\n/* harmony export */   \"computeEntityRegistryName\": () => (/* binding */ computeEntityRegistryName),\n/* harmony export */   \"getExtendedEntityRegistryEntry\": () => (/* binding */ getExtendedEntityRegistryEntry),\n/* harmony export */   \"updateEntityRegistryEntry\": () => (/* binding */ updateEntityRegistryEntry),\n/* harmony export */   \"removeEntityRegistryEntry\": () => (/* binding */ removeEntityRegistryEntry),\n/* harmony export */   \"fetchEntityRegistry\": () => (/* binding */ fetchEntityRegistry),\n/* harmony export */   \"subscribeEntityRegistry\": () => (/* binding */ subscribeEntityRegistry),\n/* harmony export */   \"sortEntityRegistryByName\": () => (/* binding */ sortEntityRegistryByName)\n/* harmony export */ });\n/* harmony import */ var home_assistant_js_websocket__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! home-assistant-js-websocket */ \"./node_modules/home-assistant-js-websocket/dist/collection.js\");\n/* harmony import */ var _common_entity_compute_state_name__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/entity/compute_state_name */ \"./src/common/entity/compute_state_name.ts\");\n/* harmony import */ var _common_string_compare__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/string/compare */ \"./src/common/string/compare.ts\");\n/* harmony import */ var _common_util_debounce__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/util/debounce */ \"./src/common/util/debounce.ts\");\n\n\n\n\nconst findBatteryEntity = (hass, entities) => entities.find(entity => hass.states[entity.entity_id] && hass.states[entity.entity_id].attributes.device_class === \"battery\");\nconst findBatteryChargingEntity = (hass, entities) => entities.find(entity => hass.states[entity.entity_id] && hass.states[entity.entity_id].attributes.device_class === \"battery_charging\");\nconst computeEntityRegistryName = (hass, entry) => {\n  if (entry.name) {\n    return entry.name;\n  }\n\n  const state = hass.states[entry.entity_id];\n  return state ? (0,_common_entity_compute_state_name__WEBPACK_IMPORTED_MODULE_0__.computeStateName)(state) : entry.entity_id;\n};\nconst getExtendedEntityRegistryEntry = (hass, entityId) => hass.callWS({\n  type: \"config/entity_registry/get\",\n  entity_id: entityId\n});\nconst updateEntityRegistryEntry = (hass, entityId, updates) => hass.callWS({\n  type: \"config/entity_registry/update\",\n  entity_id: entityId,\n  ...updates\n});\nconst removeEntityRegistryEntry = (hass, entityId) => hass.callWS({\n  type: \"config/entity_registry/remove\",\n  entity_id: entityId\n});\nconst fetchEntityRegistry = conn => conn.sendMessagePromise({\n  type: \"config/entity_registry/list\"\n});\n\nconst subscribeEntityRegistryUpdates = (conn, store) => conn.subscribeEvents((0,_common_util_debounce__WEBPACK_IMPORTED_MODULE_2__.debounce)(() => fetchEntityRegistry(conn).then(entities => store.setState(entities, true)), 500, true), \"entity_registry_updated\");\n\nconst subscribeEntityRegistry = (conn, onChange) => (0,home_assistant_js_websocket__WEBPACK_IMPORTED_MODULE_3__.createCollection)(\"_entityRegistry\", fetchEntityRegistry, subscribeEntityRegistryUpdates, conn, onChange);\nconst sortEntityRegistryByName = entries => entries.sort((entry1, entry2) => (0,_common_string_compare__WEBPACK_IMPORTED_MODULE_1__.caseInsensitiveStringCompare)(entry1.name || \"\", entry2.name || \"\"));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZGF0YS9lbnRpdHlfcmVnaXN0cnkudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBRUE7QUFDQTtBQUNBO0FBNkNBO0FBVUE7QUFXQTtBQUlBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUtBO0FBQ0E7QUFGQTtBQUtBO0FBTUE7QUFDQTtBQUNBO0FBSEE7QUFNQTtBQUtBO0FBQ0E7QUFGQTtBQUtBO0FBRUE7QUFEQTs7QUFJQTs7QUFnQkE7QUFZQSIsInNvdXJjZXMiOlsid2VicGFjazovL2hvbWUtYXNzaXN0YW50LWZyb250ZW5kLy4vc3JjL2RhdGEvZW50aXR5X3JlZ2lzdHJ5LnRzPzNhNzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29ubmVjdGlvbiwgY3JlYXRlQ29sbGVjdGlvbiB9IGZyb20gXCJob21lLWFzc2lzdGFudC1qcy13ZWJzb2NrZXRcIjtcbmltcG9ydCB7IFN0b3JlIH0gZnJvbSBcImhvbWUtYXNzaXN0YW50LWpzLXdlYnNvY2tldC9kaXN0L3N0b3JlXCI7XG5pbXBvcnQgeyBjb21wdXRlU3RhdGVOYW1lIH0gZnJvbSBcIi4uL2NvbW1vbi9lbnRpdHkvY29tcHV0ZV9zdGF0ZV9uYW1lXCI7XG5pbXBvcnQgeyBjYXNlSW5zZW5zaXRpdmVTdHJpbmdDb21wYXJlIH0gZnJvbSBcIi4uL2NvbW1vbi9zdHJpbmcvY29tcGFyZVwiO1xuaW1wb3J0IHsgZGVib3VuY2UgfSBmcm9tIFwiLi4vY29tbW9uL3V0aWwvZGVib3VuY2VcIjtcbmltcG9ydCB7IEhvbWVBc3Npc3RhbnQgfSBmcm9tIFwiLi4vdHlwZXNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBFbnRpdHlSZWdpc3RyeUVudHJ5IHtcbiAgZW50aXR5X2lkOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZyB8IG51bGw7XG4gIGljb246IHN0cmluZyB8IG51bGw7XG4gIHBsYXRmb3JtOiBzdHJpbmc7XG4gIGNvbmZpZ19lbnRyeV9pZDogc3RyaW5nIHwgbnVsbDtcbiAgZGV2aWNlX2lkOiBzdHJpbmcgfCBudWxsO1xuICBhcmVhX2lkOiBzdHJpbmcgfCBudWxsO1xuICBkaXNhYmxlZF9ieTogc3RyaW5nIHwgbnVsbDtcbiAgaGlkZGVuX2J5OiBzdHJpbmcgfCBudWxsO1xuICBlbnRpdHlfY2F0ZWdvcnk6IFwiY29uZmlnXCIgfCBcImRpYWdub3N0aWNcIiB8IG51bGw7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXh0RW50aXR5UmVnaXN0cnlFbnRyeSBleHRlbmRzIEVudGl0eVJlZ2lzdHJ5RW50cnkge1xuICB1bmlxdWVfaWQ6IHN0cmluZztcbiAgY2FwYWJpbGl0aWVzOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbiAgb3JpZ2luYWxfbmFtZT86IHN0cmluZztcbiAgb3JpZ2luYWxfaWNvbj86IHN0cmluZztcbiAgZGV2aWNlX2NsYXNzPzogc3RyaW5nO1xuICBvcmlnaW5hbF9kZXZpY2VfY2xhc3M/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXBkYXRlRW50aXR5UmVnaXN0cnlFbnRyeVJlc3VsdCB7XG4gIGVudGl0eV9lbnRyeTogRXh0RW50aXR5UmVnaXN0cnlFbnRyeTtcbiAgcmVsb2FkX2RlbGF5PzogbnVtYmVyO1xuICByZXF1aXJlX3Jlc3RhcnQ/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVudGl0eVJlZ2lzdHJ5RW50cnlVcGRhdGVQYXJhbXMge1xuICBuYW1lPzogc3RyaW5nIHwgbnVsbDtcbiAgaWNvbj86IHN0cmluZyB8IG51bGw7XG4gIGRldmljZV9jbGFzcz86IHN0cmluZyB8IG51bGw7XG4gIGFyZWFfaWQ/OiBzdHJpbmcgfCBudWxsO1xuICBkaXNhYmxlZF9ieT86IHN0cmluZyB8IG51bGw7XG4gIGhpZGRlbl9ieTogc3RyaW5nIHwgbnVsbDtcbiAgbmV3X2VudGl0eV9pZD86IHN0cmluZztcbiAgb3B0aW9uc19kb21haW4/OiBzdHJpbmc7XG4gIG9wdGlvbnM/OiB7XG4gICAgdW5pdF9vZl9tZWFzdXJlbWVudD86IHN0cmluZyB8IG51bGw7XG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCBmaW5kQmF0dGVyeUVudGl0eSA9IChcbiAgaGFzczogSG9tZUFzc2lzdGFudCxcbiAgZW50aXRpZXM6IEVudGl0eVJlZ2lzdHJ5RW50cnlbXVxuKTogRW50aXR5UmVnaXN0cnlFbnRyeSB8IHVuZGVmaW5lZCA9PlxuICBlbnRpdGllcy5maW5kKFxuICAgIChlbnRpdHkpID0+XG4gICAgICBoYXNzLnN0YXRlc1tlbnRpdHkuZW50aXR5X2lkXSAmJlxuICAgICAgaGFzcy5zdGF0ZXNbZW50aXR5LmVudGl0eV9pZF0uYXR0cmlidXRlcy5kZXZpY2VfY2xhc3MgPT09IFwiYmF0dGVyeVwiXG4gICk7XG5cbmV4cG9ydCBjb25zdCBmaW5kQmF0dGVyeUNoYXJnaW5nRW50aXR5ID0gKFxuICBoYXNzOiBIb21lQXNzaXN0YW50LFxuICBlbnRpdGllczogRW50aXR5UmVnaXN0cnlFbnRyeVtdXG4pOiBFbnRpdHlSZWdpc3RyeUVudHJ5IHwgdW5kZWZpbmVkID0+XG4gIGVudGl0aWVzLmZpbmQoXG4gICAgKGVudGl0eSkgPT5cbiAgICAgIGhhc3Muc3RhdGVzW2VudGl0eS5lbnRpdHlfaWRdICYmXG4gICAgICBoYXNzLnN0YXRlc1tlbnRpdHkuZW50aXR5X2lkXS5hdHRyaWJ1dGVzLmRldmljZV9jbGFzcyA9PT1cbiAgICAgICAgXCJiYXR0ZXJ5X2NoYXJnaW5nXCJcbiAgKTtcblxuZXhwb3J0IGNvbnN0IGNvbXB1dGVFbnRpdHlSZWdpc3RyeU5hbWUgPSAoXG4gIGhhc3M6IEhvbWVBc3Npc3RhbnQsXG4gIGVudHJ5OiBFbnRpdHlSZWdpc3RyeUVudHJ5XG4pOiBzdHJpbmcgfCBudWxsID0+IHtcbiAgaWYgKGVudHJ5Lm5hbWUpIHtcbiAgICByZXR1cm4gZW50cnkubmFtZTtcbiAgfVxuICBjb25zdCBzdGF0ZSA9IGhhc3Muc3RhdGVzW2VudHJ5LmVudGl0eV9pZF07XG4gIHJldHVybiBzdGF0ZSA/IGNvbXB1dGVTdGF0ZU5hbWUoc3RhdGUpIDogZW50cnkuZW50aXR5X2lkO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEV4dGVuZGVkRW50aXR5UmVnaXN0cnlFbnRyeSA9IChcbiAgaGFzczogSG9tZUFzc2lzdGFudCxcbiAgZW50aXR5SWQ6IHN0cmluZ1xuKTogUHJvbWlzZTxFeHRFbnRpdHlSZWdpc3RyeUVudHJ5PiA9PlxuICBoYXNzLmNhbGxXUyh7XG4gICAgdHlwZTogXCJjb25maWcvZW50aXR5X3JlZ2lzdHJ5L2dldFwiLFxuICAgIGVudGl0eV9pZDogZW50aXR5SWQsXG4gIH0pO1xuXG5leHBvcnQgY29uc3QgdXBkYXRlRW50aXR5UmVnaXN0cnlFbnRyeSA9IChcbiAgaGFzczogSG9tZUFzc2lzdGFudCxcbiAgZW50aXR5SWQ6IHN0cmluZyxcbiAgdXBkYXRlczogUGFydGlhbDxFbnRpdHlSZWdpc3RyeUVudHJ5VXBkYXRlUGFyYW1zPlxuKTogUHJvbWlzZTxVcGRhdGVFbnRpdHlSZWdpc3RyeUVudHJ5UmVzdWx0PiA9PlxuICBoYXNzLmNhbGxXUyh7XG4gICAgdHlwZTogXCJjb25maWcvZW50aXR5X3JlZ2lzdHJ5L3VwZGF0ZVwiLFxuICAgIGVudGl0eV9pZDogZW50aXR5SWQsXG4gICAgLi4udXBkYXRlcyxcbiAgfSk7XG5cbmV4cG9ydCBjb25zdCByZW1vdmVFbnRpdHlSZWdpc3RyeUVudHJ5ID0gKFxuICBoYXNzOiBIb21lQXNzaXN0YW50LFxuICBlbnRpdHlJZDogc3RyaW5nXG4pOiBQcm9taXNlPHZvaWQ+ID0+XG4gIGhhc3MuY2FsbFdTKHtcbiAgICB0eXBlOiBcImNvbmZpZy9lbnRpdHlfcmVnaXN0cnkvcmVtb3ZlXCIsXG4gICAgZW50aXR5X2lkOiBlbnRpdHlJZCxcbiAgfSk7XG5cbmV4cG9ydCBjb25zdCBmZXRjaEVudGl0eVJlZ2lzdHJ5ID0gKGNvbm46IENvbm5lY3Rpb24pID0+XG4gIGNvbm4uc2VuZE1lc3NhZ2VQcm9taXNlPEVudGl0eVJlZ2lzdHJ5RW50cnlbXT4oe1xuICAgIHR5cGU6IFwiY29uZmlnL2VudGl0eV9yZWdpc3RyeS9saXN0XCIsXG4gIH0pO1xuXG5jb25zdCBzdWJzY3JpYmVFbnRpdHlSZWdpc3RyeVVwZGF0ZXMgPSAoXG4gIGNvbm46IENvbm5lY3Rpb24sXG4gIHN0b3JlOiBTdG9yZTxFbnRpdHlSZWdpc3RyeUVudHJ5W10+XG4pID0+XG4gIGNvbm4uc3Vic2NyaWJlRXZlbnRzKFxuICAgIGRlYm91bmNlKFxuICAgICAgKCkgPT5cbiAgICAgICAgZmV0Y2hFbnRpdHlSZWdpc3RyeShjb25uKS50aGVuKChlbnRpdGllcykgPT5cbiAgICAgICAgICBzdG9yZS5zZXRTdGF0ZShlbnRpdGllcywgdHJ1ZSlcbiAgICAgICAgKSxcbiAgICAgIDUwMCxcbiAgICAgIHRydWVcbiAgICApLFxuICAgIFwiZW50aXR5X3JlZ2lzdHJ5X3VwZGF0ZWRcIlxuICApO1xuXG5leHBvcnQgY29uc3Qgc3Vic2NyaWJlRW50aXR5UmVnaXN0cnkgPSAoXG4gIGNvbm46IENvbm5lY3Rpb24sXG4gIG9uQ2hhbmdlOiAoZW50aXRpZXM6IEVudGl0eVJlZ2lzdHJ5RW50cnlbXSkgPT4gdm9pZFxuKSA9PlxuICBjcmVhdGVDb2xsZWN0aW9uPEVudGl0eVJlZ2lzdHJ5RW50cnlbXT4oXG4gICAgXCJfZW50aXR5UmVnaXN0cnlcIixcbiAgICBmZXRjaEVudGl0eVJlZ2lzdHJ5LFxuICAgIHN1YnNjcmliZUVudGl0eVJlZ2lzdHJ5VXBkYXRlcyxcbiAgICBjb25uLFxuICAgIG9uQ2hhbmdlXG4gICk7XG5cbmV4cG9ydCBjb25zdCBzb3J0RW50aXR5UmVnaXN0cnlCeU5hbWUgPSAoZW50cmllczogRW50aXR5UmVnaXN0cnlFbnRyeVtdKSA9PlxuICBlbnRyaWVzLnNvcnQoKGVudHJ5MSwgZW50cnkyKSA9PlxuICAgIGNhc2VJbnNlbnNpdGl2ZVN0cmluZ0NvbXBhcmUoZW50cnkxLm5hbWUgfHwgXCJcIiwgZW50cnkyLm5hbWUgfHwgXCJcIilcbiAgKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/data/entity_registry.ts\n");

/***/ }),

/***/ "./src/data/history.ts":
/*!*****************************!*\
  !*** ./src/data/history.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__) => {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"entityIdHistoryNeedsAttributes\": () => (/* binding */ entityIdHistoryNeedsAttributes),\n/* harmony export */   \"fetchRecent\": () => (/* binding */ fetchRecent),\n/* harmony export */   \"fetchDate\": () => (/* binding */ fetchDate),\n/* harmony export */   \"computeHistory\": () => (/* binding */ computeHistory),\n/* harmony export */   \"getStatisticIds\": () => (/* binding */ getStatisticIds),\n/* harmony export */   \"getStatisticMetadata\": () => (/* binding */ getStatisticMetadata),\n/* harmony export */   \"fetchStatistics\": () => (/* binding */ fetchStatistics),\n/* harmony export */   \"validateStatistics\": () => (/* binding */ validateStatistics),\n/* harmony export */   \"updateStatisticsMetadata\": () => (/* binding */ updateStatisticsMetadata),\n/* harmony export */   \"clearStatistics\": () => (/* binding */ clearStatistics),\n/* harmony export */   \"calculateStatisticSumGrowth\": () => (/* binding */ calculateStatisticSumGrowth),\n/* harmony export */   \"calculateStatisticsSumGrowth\": () => (/* binding */ calculateStatisticsSumGrowth),\n/* harmony export */   \"statisticsHaveType\": () => (/* binding */ statisticsHaveType),\n/* harmony export */   \"adjustStatisticsSum\": () => (/* binding */ adjustStatisticsSum)\n/* harmony export */ });\n/* harmony import */ var _common_entity_compute_domain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/entity/compute_domain */ \"./src/common/entity/compute_domain.ts\");\n/* harmony import */ var _common_entity_compute_state_display__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/entity/compute_state_display */ \"./src/common/entity/compute_state_display.ts\");\n/* harmony import */ var _common_entity_compute_state_domain__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/entity/compute_state_domain */ \"./src/common/entity/compute_state_domain.ts\");\n/* harmony import */ var _common_entity_compute_state_name__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/entity/compute_state_name */ \"./src/common/entity/compute_state_name.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_common_entity_compute_state_display__WEBPACK_IMPORTED_MODULE_1__]);\n_common_entity_compute_state_display__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? await __webpack_async_dependencies__ : __webpack_async_dependencies__)[0];\n\n\n\n\nconst DOMAINS_USE_LAST_UPDATED = [\"climate\", \"humidifier\", \"water_heater\"];\nconst NEED_ATTRIBUTE_DOMAINS = [\"climate\", \"humidifier\", \"input_datetime\", \"thermostat\", \"water_heater\"];\nconst LINE_ATTRIBUTES_TO_KEEP = [\"temperature\", \"current_temperature\", \"target_temp_low\", \"target_temp_high\", \"hvac_action\", \"humidity\", \"mode\"];\nconst entityIdHistoryNeedsAttributes = (hass, entityId) => !hass.states[entityId] || NEED_ATTRIBUTE_DOMAINS.includes((0,_common_entity_compute_domain__WEBPACK_IMPORTED_MODULE_0__.computeDomain)(entityId));\nconst fetchRecent = (hass, entityId, startTime, endTime, skipInitialState = false, significantChangesOnly, minimalResponse = true, noAttributes) => {\n  let url = \"history/period\";\n\n  if (startTime) {\n    url += \"/\" + startTime.toISOString();\n  }\n\n  url += \"?filter_entity_id=\" + entityId;\n\n  if (endTime) {\n    url += \"&end_time=\" + endTime.toISOString();\n  }\n\n  if (skipInitialState) {\n    url += \"&skip_initial_state\";\n  }\n\n  if (significantChangesOnly !== undefined) {\n    url += `&significant_changes_only=${Number(significantChangesOnly)}`;\n  }\n\n  if (minimalResponse) {\n    url += \"&minimal_response\";\n  }\n\n  if (noAttributes) {\n    url += \"&no_attributes\";\n  }\n\n  return hass.callApi(\"GET\", url);\n};\nconst fetchDate = (hass, startTime, endTime, entityId) => hass.callApi(\"GET\", `history/period/${startTime.toISOString()}?end_time=${endTime.toISOString()}&minimal_response${entityId ? `&filter_entity_id=${entityId}` : ``}${entityId && !entityIdHistoryNeedsAttributes(hass, entityId) ? `&no_attributes` : ``}`);\n\nconst equalState = (obj1, obj2) => obj1.state === obj2.state && (!obj1.attributes || !obj2.attributes || LINE_ATTRIBUTES_TO_KEEP.every(attr => obj1.attributes[attr] === obj2.attributes[attr]));\n\nconst processTimelineEntity = (localize, language, states) => {\n  const data = [];\n  const last_element = states.length - 1;\n\n  for (const state of states) {\n    if (data.length > 0 && state.state === data[data.length - 1].state) {\n      continue;\n    } // Copy the data from the last element as its the newest\n    // and is only needed to localize the data\n\n\n    if (!state.entity_id) {\n      state.attributes = states[last_element].attributes;\n      state.entity_id = states[last_element].entity_id;\n    }\n\n    data.push({\n      state_localize: (0,_common_entity_compute_state_display__WEBPACK_IMPORTED_MODULE_1__.computeStateDisplay)(localize, state, language),\n      state: state.state,\n      last_changed: state.last_changed\n    });\n  }\n\n  return {\n    name: (0,_common_entity_compute_state_name__WEBPACK_IMPORTED_MODULE_3__.computeStateName)(states[0]),\n    entity_id: states[0].entity_id,\n    data\n  };\n};\n\nconst processLineChartEntities = (unit, entities) => {\n  const data = [];\n\n  for (const states of entities) {\n    const last = states[states.length - 1];\n    const domain = (0,_common_entity_compute_state_domain__WEBPACK_IMPORTED_MODULE_2__.computeStateDomain)(last);\n    const processedStates = [];\n\n    for (const state of states) {\n      let processedState;\n\n      if (DOMAINS_USE_LAST_UPDATED.includes(domain)) {\n        processedState = {\n          state: state.state,\n          last_changed: state.last_updated,\n          attributes: {}\n        };\n\n        for (const attr of LINE_ATTRIBUTES_TO_KEEP) {\n          if (attr in state.attributes) {\n            processedState.attributes[attr] = state.attributes[attr];\n          }\n        }\n      } else {\n        processedState = state;\n      }\n\n      if (processedStates.length > 1 && equalState(processedState, processedStates[processedStates.length - 1]) && equalState(processedState, processedStates[processedStates.length - 2])) {\n        continue;\n      }\n\n      processedStates.push(processedState);\n    }\n\n    data.push({\n      domain,\n      name: (0,_common_entity_compute_state_name__WEBPACK_IMPORTED_MODULE_3__.computeStateName)(last),\n      entity_id: last.entity_id,\n      states: processedStates\n    });\n  }\n\n  return {\n    unit,\n    identifier: entities.map(states => states[0].entity_id).join(\"\"),\n    data\n  };\n};\n\nconst stateUsesUnits = state => \"unit_of_measurement\" in state.attributes || \"state_class\" in state.attributes;\n\nconst computeHistory = (hass, stateHistory, localize) => {\n  const lineChartDevices = {};\n  const timelineDevices = [];\n\n  if (!stateHistory) {\n    return {\n      line: [],\n      timeline: []\n    };\n  }\n\n  stateHistory.forEach(stateInfo => {\n    if (stateInfo.length === 0) {\n      return;\n    }\n\n    const entityId = stateInfo[0].entity_id;\n    const currentState = entityId in hass.states ? hass.states[entityId] : undefined;\n    const stateWithUnitorStateClass = !currentState && stateInfo.find(state => state.attributes && stateUsesUnits(state));\n    let unit;\n\n    if (currentState && stateUsesUnits(currentState)) {\n      unit = currentState.attributes.unit_of_measurement || \" \";\n    } else if (stateWithUnitorStateClass) {\n      unit = stateWithUnitorStateClass.attributes.unit_of_measurement || \" \";\n    } else {\n      unit = {\n        climate: hass.config.unit_system.temperature,\n        counter: \"#\",\n        humidifier: \"%\",\n        input_number: \"#\",\n        number: \"#\",\n        water_heater: hass.config.unit_system.temperature\n      }[(0,_common_entity_compute_domain__WEBPACK_IMPORTED_MODULE_0__.computeDomain)(entityId)];\n    }\n\n    if (!unit) {\n      timelineDevices.push(processTimelineEntity(localize, hass.locale, stateInfo));\n    } else if (unit in lineChartDevices) {\n      lineChartDevices[unit].push(stateInfo);\n    } else {\n      lineChartDevices[unit] = [stateInfo];\n    }\n  });\n  const unitStates = Object.keys(lineChartDevices).map(unit => processLineChartEntities(unit, lineChartDevices[unit]));\n  return {\n    line: unitStates,\n    timeline: timelineDevices\n  };\n}; // Statistics\n\nconst getStatisticIds = (hass, statistic_type) => hass.callWS({\n  type: \"history/list_statistic_ids\",\n  statistic_type\n});\nconst getStatisticMetadata = (hass, statistic_ids) => hass.callWS({\n  type: \"recorder/get_statistics_metadata\",\n  statistic_ids\n});\nconst fetchStatistics = (hass, startTime, endTime, statistic_ids, period = \"hour\") => hass.callWS({\n  type: \"history/statistics_during_period\",\n  start_time: startTime.toISOString(),\n  end_time: endTime === null || endTime === void 0 ? void 0 : endTime.toISOString(),\n  statistic_ids,\n  period\n});\nconst validateStatistics = hass => hass.callWS({\n  type: \"recorder/validate_statistics\"\n});\nconst updateStatisticsMetadata = (hass, statistic_id, unit_of_measurement) => hass.callWS({\n  type: \"recorder/update_statistics_metadata\",\n  statistic_id,\n  unit_of_measurement\n});\nconst clearStatistics = (hass, statistic_ids) => hass.callWS({\n  type: \"recorder/clear_statistics\",\n  statistic_ids\n});\nconst calculateStatisticSumGrowth = values => {\n  if (!values || values.length < 2) {\n    return null;\n  }\n\n  const endSum = values[values.length - 1].sum;\n\n  if (endSum === null) {\n    return null;\n  }\n\n  const startSum = values[0].sum;\n\n  if (startSum === null) {\n    return endSum;\n  }\n\n  return endSum - startSum;\n};\nconst calculateStatisticsSumGrowth = (data, stats) => {\n  let totalGrowth = null;\n\n  for (const stat of stats) {\n    if (!(stat in data)) {\n      continue;\n    }\n\n    const statGrowth = calculateStatisticSumGrowth(data[stat]);\n\n    if (statGrowth === null) {\n      continue;\n    }\n\n    if (totalGrowth === null) {\n      totalGrowth = statGrowth;\n    } else {\n      totalGrowth += statGrowth;\n    }\n  }\n\n  return totalGrowth;\n};\nconst statisticsHaveType = (stats, type) => stats.some(stat => stat[type] !== null);\nconst adjustStatisticsSum = (hass, statistic_id, start_time, adjustment) => hass.callWS({\n  type: \"recorder/adjust_sum_statistics\",\n  statistic_id,\n  start_time,\n  adjustment\n});\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/data/history.ts\n");

/***/ })

}]);